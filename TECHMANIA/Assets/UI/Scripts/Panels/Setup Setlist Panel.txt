setupSetlistPanel = {
    panel = tm.root.Q("setup-setlist-panel"),

    -- Each element contains:
    -- - track (minimized)
    -- - pattern (minimized)
    -- - eyecatch (may be nil)
    -- - element
    -- For missing references, the entire element is nil.
    selectablePatterns = {},
    -- nil means no eyecatch
    hiddenPatternEyecatches = {},

    -- -1 means none selected
    selectedPatternIndex = {-1, -1, -1}
}

setupSetlistPanel.Initialize = function()
    local panel = setupSetlistPanel.panel

    local setupSetlist = panel.Q("setup-setlist")
    local missingPatternWarning = panel.Q("missing-pattern-warning")
    missingPatternWarning.Q("continue-button").RegisterCallback(eventType.Click, function()
        tm.StartCoroutine(function()
            FadeOutCoroutine(missingPatternWarning, 0, 0, function()
                missingPatternWarning.display = false
                missingPatternWarning.style.opacity = StyleFloat(1)
                setupSetlist.display = true
                FadeInCoroutine(setupSetlist, 0, 0)
            end)
        end)
    end)

    local dragPlane = panel.Q("drag-plane")
    dragPlane.RegisterCallback(eventType.PointerMove, function(_, event)
        local miniEyecatchCenter = dragPlane.Q("mini-eyecatch-center")
        local x, y = XYFromStyleTranslate(miniEyecatchCenter.style.translate)
        x = x + event.deltaPosition.x
        y = y + event.deltaPosition.y
        miniEyecatchCenter.style.translate = StyleTranslate(x, y)

        for i = 1, 3 do
            local dropTarget = panel.Q("selected-patterns").Children()[i].Q("no-pattern")
            local onTarget = dropTarget.ContainsPointInScreenSpace(Vector3ToVector2(event.position))
            dropTarget.EnableInClassList("at-rest", not onTarget)
            dropTarget.EnableInClassList("accepting-drop", onTarget)
        end
    end)
    dragPlane.RegisterCallback(eventType.PointerUp, function(_, event)
        dragPlane.display = false
        for i = 1, 3 do
            local dropTarget = panel.Q("selected-patterns").Children()[i].Q("no-pattern")
            if (dropTarget.ContainsPointInScreenSpace(Vector3ToVector2(event.position))) then
                -- TODO: set selected pattern index
            end
        end
        setupSetlistPanel.Refresh()
    end)
end

setupSetlistPanel.SetUpDragEvents = function(miniEyecatch)
    miniEyecatch.RegisterCallback(eventType.PointerDown, function(_, event)
        -- Move mini eyecatch to drag plane to allow dragging
        local dragPlane = setupSetlistPanel.panel.Q("drag-plane")
        dragPlane.Q("mini-eyecatch-center").style.translate = StyleTranslate(event.position.x, event.position.y)
        if (miniEyecatch.backgroundImage == nil) then
            dragPlane.Q("mini-eyecatch").backgroundImage = tm.io.LoadTextureFromTheme("Assets/UI/Images/Rectangle.png")
        else
            dragPlane.Q("mini-eyecatch").backgroundImage = miniEyecatch.backgroundImage
        end
        miniEyecatch.visible = false
        dragPlane.display = true  -- will handle pointer move and up
    end)
end

setupSetlistPanel.Show = function()
    local panel = setupSetlistPanel.panel
    local setlist = selectSetlistPanel.selectedSetlist

    setupSetlistPanel.selectablePatterns = {}
    local selectablePatternContainer = panel.Q("selectable-patterns").Q("unity-content-container")
    selectablePatternContainer.RemoveAllChildren()

    -- Search for all pattern references
    local availableSelectablePatterns = 0
    local missingReferences = {}

    for index, ref in ipairs(setlist.selectablePatterns) do
        local status, trackInFolder, pattern = tm.resources.SearchForPatternReference(ref)
        if (status.Ok()) then
            availableSelectablePatterns = availableSelectablePatterns + 1
            local element = selectablePatternContainer.InstantiateTemplate("Assets/UI/Templates/Setlist Selectable Pattern.uxml")
            element.Q("level").text = tostring(pattern.patternMetadata.level)
            setupSetlistPanel.SetUpDragEvents(element.Q("mini-eyecatch"))
            setupSetlistPanel.selectablePatterns[index] = {
                track = trackInFolder.minimizedTrack,
                pattern = pattern,
                eyecatch = nil,
                element = element
            }

            local eyecatchPath = tm.paths.Combine(trackInFolder.folder, trackInFolder.minimizedTrack.trackMetadata.eyecatchImage)
            tm.io.LoadTextureFromFile(eyecatchPath, function(status, texture)
                if (status.Ok()) then
                    setupSetlistPanel.selectablePatterns[index].eyecatch = texture
                    element.Q("mini-eyecatch").backgroundImage = texture
                    element.Q("default-eyecatch").display = false
                else
                    element.Q("mini-eyecatch").backgroundImage = nil
                    element.Q("default-eyecatch").display = true
                end
            end)
        else
            table.insert(missingReferences, ref)
        end
    end

    local availableHiddenPatterns = 0
    for index, hiddenPattern in ipairs(setlist.hiddenPatterns) do
        local ref = hiddenPattern.reference
        local status, trackInFolder, pattern = tm.resources.SearchForPatternReference(ref)
        if (status.Ok()) then
            availableHiddenPatterns = availableHiddenPatterns + 1

            local eyecatchPath = tm.paths.Combine(trackInFolder.folder, trackInFolder.minimizedTrack.trackMetadata.eyecatchImage)
            tm.io.LoadTextureFromFile(eyecatchPath, function(status, texture)
                if (status.Ok()) then
                    setupSetlistPanel.hiddenPatternEyecatches[index] = texture
                end
            end)
        else
            table.insert(missingReferences, ref)
        end
    end

    -- Display missing pattern warning if necessary
    local enoughPatterns = availableSelectablePatterns >= 3 and availableHiddenPatterns >= 1
    if (#missingReferences > 0 or not enoughPatterns) then
        panel.Q("setup-setlist").display = false
        panel.Q("missing-pattern-warning").display = true

        if (#missingReferences > 0) then
            panel.Q("missing-pattern-label").display = true
            local missingPatternList = panel.Q("missing-pattern-list")
            missingPatternList.display = true
            missingPatternList.RemoveAllChildren()
            for _, ref in ipairs(missingReferences) do
                local missingPatternElement = missingPatternList.InstantiateTemplate("Assets/UI/Templates/Setlist Missing Pattern.uxml").Q("missing-pattern")
                missingPatternElement.Q("title").text = ref.trackTitle
                local missingPatternBanner = missingPatternElement.Q("pattern-banner")
                SetUpPatternBanner({
                    playableLanes = ref.patternPlayableLanes,
                    controlScheme = setlist.setlistMetadata.controlScheme,
                    level = ref.patternLevel,
                    patternName = ref.patternName
                }, missingPatternBanner)
                missingPatternBanner.Q("medal-container").display = false
            end
        else
            panel.Q("missing-pattern-label").display = false
            panel.Q("missing-pattern-list").display = false
        end

        panel.Q("continue-playing-label").display = enoughPatterns
        panel.Q("continue-button-wrap").display = enoughPatterns
        panel.Q("not-enough-patterns-label").display = not enoughPatterns
    else
        panel.Q("setup-setlist").display = true
        panel.Q("missing-pattern-warning").display = false
    end

    -- Reset all selected patterns
    for i = 1, 3 do
        local element = panel.Q("selected-patterns").Children()[i]
        element.Q("no-pattern").display = true
        element.Q("eyecatch").display = false
        element.Q("title-container").display = false
        element.Q("Pattern-Banner").display = false
    end
end

setupSetlistPanel.Hide = function()
    -- TODO: hide eyecatches
end

setupSetlistPanel.Refresh = function()
    -- Cannot do ipairs(setupSetlistPanel.selectablePatterns) here as there may be nils in the middle.
    for index, _ in ipairs(selectSetlistPanel.selectedSetlist.selectablePatterns) do
        local pattern = setupSetlistPanel.selectablePatterns[index]
        if (pattern != nil) then
            local patternElement = pattern.element
            -- Dragged mini eyecatches will turn invisible, restore them
            patternElement.Q("mini-eyecatch").visible = true
        end
    end

    for _, element in ipairs(setupSetlistPanel.panel.Q("selected-patterns").Children()) do
        local noPattern = element.Q("no-pattern")
        noPattern.AddToClassList("at-rest")
        noPattern.RemoveFromClassList("accepting-drop")
    end
end

setupSetlistPanel.Initialize()