setupSetlistPanel = {
    panel = tm.root.Q("setup-setlist-panel"),

    -- Each element contains:
    -- - track (minimized)
    -- - pattern (minimized)
    -- - eyecatch (may be nil)
    -- - element
    -- For missing references, the entire element is nil.
    selectablePatterns = {},
    -- nil means no eyecatch
    hiddenPatternEyecatches = {},

    -- On dragging
    selectablePatternBeingDragged = -1,
    selectedPatternBeingDragged = -1,
    totalDragDistance = 0,
    
    -- -1 means none selected
    selectedPatternIndex = {-1, -1, -1}
}

setupSetlistPanel.GetStageNumber = function(selectablePatternIndex)
    if (selectablePatternIndex == -1) then return -1 end
    for stageNumber, index in ipairs(setupSetlistPanel.selectedPatternIndex) do
        if (index == selectablePatternIndex) then
            return stageNumber
        end
    end
    return -1
end

setupSetlistPanel.Initialize = function()
    local panel = setupSetlistPanel.panel
    local dragPlane = panel.Q("drag-plane")

    local setupSetlist = panel.Q("setup-setlist")
    local missingPatternWarning = panel.Q("missing-pattern-warning")
    missingPatternWarning.Q("continue-button").RegisterCallback(eventType.Click, function()
        tm.StartCoroutine(function()
            FadeOutCoroutine(missingPatternWarning, 0, 0, function()
                missingPatternWarning.display = false
                missingPatternWarning.style.opacity = StyleFloat(1)
                setupSetlist.display = true
                FadeInCoroutine(setupSetlist, 0, 0)
            end)
        end)
    end)

    local selectedPatterns = panel.Q("selected-patterns")
    for i = 1, 3 do
        local element = selectedPatterns.Children()[i]
        element.Q("eyecatch").RegisterCallback(eventType.PointerDown, function(_, event)
            local index = setupSetlistPanel.selectedPatternIndex[i]
            if (index == -1) then return end

            -- Move mini eyecatch to drag plane to allow dragging
            dragPlane.Q("mini-eyecatch-center").style.translate = StyleTranslate(event.position.x, event.position.y)
            if (setupSetlistPanel.selectablePatterns[index].eyecatch == nil) then
                dragPlane.Q("mini-eyecatch").backgroundImage = tm.io.LoadTextureFromTheme("Assets/UI/Images/Rectangle.png")
            else
                dragPlane.Q("mini-eyecatch").backgroundImage = setupSetlistPanel.selectablePatterns[index].eyecatch
            end
            element.Q("drop-target").visible = true
            element.Q("drop-target").display = true
            element.Q("eyecatch").display = false
            element.Q("default-eyecatch").display = false
            dragPlane.display = true  -- will handle pointer move and up
            setupSetlistPanel.selectedPatternBeingDragged = i
        end)
    end

    dragPlane.RegisterCallback(eventType.PointerMove, function(_, event)
        local miniEyecatchCenter = dragPlane.Q("mini-eyecatch-center")
        local x, y = XYFromStyleTranslate(miniEyecatchCenter.style.translate)
        x = x + event.deltaPosition.x
        y = y + event.deltaPosition.y
        miniEyecatchCenter.style.translate = StyleTranslate(x, y)

        -- Accumulate drag distance
        setupSetlistPanel.totalDragDistance = setupSetlistPanel.totalDragDistance + event.deltaPosition.magnitude

        for i = 1, 3 do
            local dropTarget = selectedPatterns.Children()[i].Q("drop-target")
            local onTarget = ElementContainsPointerPosition(dropTarget, event.position)
            dropTarget.EnableInClassList("at-rest", not onTarget)
            dropTarget.EnableInClassList("accepting-drop", onTarget)
        end
    end)
    dragPlane.RegisterCallback(eventType.PointerUp, function(_, event)
        dragPlane.display = false

        if (setupSetlistPanel.totalDragDistance < 10) then
            -- Clicked
            if (setupSetlistPanel.selectablePatternBeingDragged != -1) then
                -- Clicked selectable, select it if any spot available
                for index = 1, 3 do
                    if (setupSetlistPanel.selectedPatternIndex[index] == -1) then
                        setupSetlistPanel.selectedPatternIndex[index] = setupSetlistPanel.selectablePatternBeingDragged
                        tm.audio.PlaySfx(tm.io.LoadAudioFromTheme("Assets/UI/SFX/Click.wav"))
                        break
                    end
                end
            elseif (setupSetlistPanel.selectedPatternBeingDragged != -1) then
                -- Clicked selected, remove it
                setupSetlistPanel.selectedPatternIndex[setupSetlistPanel.selectedPatternBeingDragged] = -1
                tm.audio.PlaySfx(tm.io.LoadAudioFromTheme("Assets/UI/SFX/Back.wav"))
            end
        else
            -- Dragged. Did the drag land on any target?
            local stageNumber = -1
            for i = 1, 3 do
                local dropTarget = selectedPatterns.Children()[i].Q("drop-target")
                if (ElementContainsPointerPosition(dropTarget, event.position)) then
                    stageNumber = i
                    break
                end
            end

            if (stageNumber != -1) then
                if (setupSetlistPanel.selectablePatternBeingDragged != -1) then
                    -- Dragged selectable --> selected, select it
                    setupSetlistPanel.selectedPatternIndex[stageNumber] = setupSetlistPanel.selectablePatternBeingDragged
                    tm.audio.PlaySfx(tm.io.LoadAudioFromTheme("Assets/UI/SFX/Click.wav"))
                end
                if (setupSetlistPanel.selectedPatternBeingDragged != -1) then
                    -- Dragged selected --> selected, swap them
                    local stageNumberOld = setupSetlistPanel.selectedPatternBeingDragged
                    local stageNumberNew = stageNumber
                    if (stageNumberOld != stageNumberNew) then
                        local patternIndexOld = setupSetlistPanel.selectedPatternIndex[stageNumberOld]
                        local patternIndexNew = setupSetlistPanel.selectedPatternIndex[stageNumberNew] -- may be -1
                        setupSetlistPanel.selectedPatternIndex[stageNumberOld] = patternIndexNew
                        setupSetlistPanel.selectedPatternIndex[stageNumberNew] = patternIndexOld
                        tm.audio.PlaySfx(tm.io.LoadAudioFromTheme("Assets/UI/SFX/Click.wav"))
                    end
                end
            else
                if (setupSetlistPanel.selectedPatternBeingDragged != -1) then
                    -- Dragged selected --> outside, remove it
                    setupSetlistPanel.selectedPatternIndex[setupSetlistPanel.selectedPatternBeingDragged] = -1
                    tm.audio.PlaySfx(tm.io.LoadAudioFromTheme("Assets/UI/SFX/Back.wav"))
                end
            end
        end
        
        setupSetlistPanel.selectablePatternBeingDragged = -1
        setupSetlistPanel.selectedPatternBeingDragged = -1
        setupSetlistPanel.totalDragDistance = 0
        setupSetlistPanel.Refresh()
    end)
end

setupSetlistPanel.Show = function()
    local panel = setupSetlistPanel.panel
    local setlist = selectSetlistPanel.selectedSetlist

    local selectablePatternContainer = panel.Q("selectable-patterns").Q("unity-content-container")
    selectablePatternContainer.RemoveAllChildren()

    -- Search for all pattern references
    local availableSelectablePatterns = 0
    local missingReferences = {}

    for index, ref in ipairs(setlist.selectablePatterns) do
        local status, trackInFolder, pattern = tm.resources.SearchForPatternReference(ref)
        if (status.Ok()) then
            availableSelectablePatterns = availableSelectablePatterns + 1

            local element = selectablePatternContainer.InstantiateTemplate("Assets/UI/Templates/Setlist Selectable Pattern.uxml")
            element.Q("level").text = tostring(pattern.patternMetadata.level)
            local miniEyecatch = element.Q("mini-eyecatch")
            miniEyecatch.RegisterCallback(eventType.PointerDown, function(_, event)
                -- Move mini eyecatch to drag plane to allow dragging
                local dragPlane = setupSetlistPanel.panel.Q("drag-plane")
                dragPlane.Q("mini-eyecatch-center").style.translate = StyleTranslate(event.position.x, event.position.y)
                if (setupSetlistPanel.selectablePatterns[index].eyecatch == nil) then
                    dragPlane.Q("mini-eyecatch").backgroundImage = tm.io.LoadTextureFromTheme("Assets/UI/Images/Rectangle.png")
                else
                    dragPlane.Q("mini-eyecatch").backgroundImage = setupSetlistPanel.selectablePatterns[index].eyecatch
                end
                miniEyecatch.visible = false
                dragPlane.display = true  -- will handle pointer move and up
                setupSetlistPanel.selectablePatternBeingDragged = index
            end)

            setupSetlistPanel.selectablePatterns[index] = {
                track = trackInFolder.minimizedTrack,
                pattern = pattern,
                eyecatch = nil,
                element = element
            }

            local eyecatchPath = tm.paths.Combine(trackInFolder.folder, trackInFolder.minimizedTrack.trackMetadata.eyecatchImage)
            tm.io.LoadTextureFromFile(eyecatchPath, function(status, texture)
                if (status.Ok()) then
                    setupSetlistPanel.selectablePatterns[index].eyecatch = texture
                    element.Q("mini-eyecatch").backgroundImage = texture
                    element.Q("default-eyecatch").display = false
                else
                    element.Q("mini-eyecatch").backgroundImage = nil
                    element.Q("default-eyecatch").display = true
                end
            end)
        else
            table.insert(missingReferences, ref)
        end
    end

    local availableHiddenPatterns = 0
    for index, hiddenPattern in ipairs(setlist.hiddenPatterns) do
        local ref = hiddenPattern.reference
        local status, trackInFolder, pattern = tm.resources.SearchForPatternReference(ref)
        if (status.Ok()) then
            availableHiddenPatterns = availableHiddenPatterns + 1

            local eyecatchPath = tm.paths.Combine(trackInFolder.folder, trackInFolder.minimizedTrack.trackMetadata.eyecatchImage)
            tm.io.LoadTextureFromFile(eyecatchPath, function(status, texture)
                if (status.Ok()) then
                    setupSetlistPanel.hiddenPatternEyecatches[index] = texture
                end
            end)
        else
            table.insert(missingReferences, ref)
        end
    end

    -- Display missing pattern warning if necessary
    local enoughPatterns = availableSelectablePatterns >= 3 and availableHiddenPatterns >= 1
    if (#missingReferences > 0 or not enoughPatterns) then
        panel.Q("setup-setlist").display = false
        panel.Q("missing-pattern-warning").display = true

        if (#missingReferences > 0) then
            panel.Q("missing-pattern-label").display = true
            local missingPatternList = panel.Q("missing-pattern-list")
            missingPatternList.display = true
            missingPatternList.RemoveAllChildren()
            for _, ref in ipairs(missingReferences) do
                local missingPatternElement = missingPatternList.InstantiateTemplate("Assets/UI/Templates/Setlist Missing Pattern.uxml").Q("missing-pattern")
                missingPatternElement.Q("title").text = ref.trackTitle
                local missingPatternBanner = missingPatternElement.Q("pattern-banner")
                SetUpPatternBanner({
                    playableLanes = ref.patternPlayableLanes,
                    controlScheme = setlist.setlistMetadata.controlScheme,
                    level = ref.patternLevel,
                    patternName = ref.patternName
                }, missingPatternBanner)
                missingPatternBanner.Q("medal-container").display = false
            end
        else
            panel.Q("missing-pattern-label").display = false
            panel.Q("missing-pattern-list").display = false
        end

        panel.Q("continue-playing-label").display = enoughPatterns
        panel.Q("continue-button-wrap").display = enoughPatterns
        panel.Q("not-enough-patterns-label").display = not enoughPatterns
    else
        panel.Q("setup-setlist").display = true
        panel.Q("missing-pattern-warning").display = false
    end

    -- Reset all selected patterns
    for i = 1, 3 do
        local element = panel.Q("selected-patterns").Children()[i]
        element.Q("drop-target").display = true
        element.Q("eyecatch").display = false
        element.Q("default-eyecatch").display = false
        element.Q("title-container").display = false
        element.Q("Pattern-Banner").display = false
    end

    -- Disable play button, will re-enable once 3 patterns selected
    panel.Q("play-button").SetEnabled(false)
end

setupSetlistPanel.Hide = function()
    -- Release eyecatches
    for index, _ in ipairs(setlist.selectablePatterns) do
        local pattern = setupSetlistPanel.selectablePatterns[index]
        if (pattern.eyecatch != nil) then
            tm.io.ReleaseTexture(pattern.release)
        end
    end
    setupSetlistPanel.selectablePatterns = {}
    
    for index, _ in ipairs(setlist.hiddenPatterns) do
        if (setupSetlistPanel.hiddenPatternEyecatches[index] != nil) then
            tm.io.ReleaseTexture(setupSetlistPanel.hiddenPatternEyecatches[index])
        end
    end
    setupSetlistPanel.hiddenPatternEyecatches = {}
end

setupSetlistPanel.Refresh = function()
    -- Cannot do ipairs(setupSetlistPanel.selectablePatterns) here as there may be nils in the middle.
    for index, _ in ipairs(selectSetlistPanel.selectedSetlist.selectablePatterns) do
        local pattern = setupSetlistPanel.selectablePatterns[index]
        if (pattern != nil) then
            local element = pattern.element
            -- Dragged mini eyecatches will turn invisible, restore them
            element.Q("mini-eyecatch").visible = true

            local stageNumber = setupSetlistPanel.GetStageNumber(index)
            if (stageNumber != -1) then
                element.Q("mini-eyecatch").pickable = false
                element.Q("mini-eyecatch").backgroundImage = nil
                element.Q("default-eyecatch").display = false
                element.Q("index").display = true
                element.Q("index").text = tostring(stageNumber)
                element.Q("level").display = false
            else
                element.Q("mini-eyecatch").pickable = true
                element.Q("mini-eyecatch").backgroundImage = pattern.eyecatch
                element.Q("default-eyecatch").display = pattern.eyecatch == nil
                element.Q("index").display = false
                element.Q("level").display = true
            end
        end
    end

    for index, element in ipairs(setupSetlistPanel.panel.Q("selected-patterns").Children()) do
        local dropTarget = element.Q("drop-target")
        dropTarget.AddToClassList("at-rest")
        dropTarget.RemoveFromClassList("accepting-drop")

        if (index > 3) then break end

        local patternIndex = setupSetlistPanel.selectedPatternIndex[index]
        if (patternIndex != -1) then
            dropTarget.visible = false  -- don't turn off display as it still needs to receive drops
            element.Q("eyecatch").display = true
            element.Q("eyecatch").backgroundImage = setupSetlistPanel.selectablePatterns[patternIndex].eyecatch
            element.Q("default-eyecatch").display = setupSetlistPanel.selectablePatterns[patternIndex].eyecatch == nil
            element.Q("title-container").display = true
            element.Q("title-container").Q("title").text = setupSetlistPanel.selectablePatterns[patternIndex].track.trackMetadata.title
            element.Q("Pattern-Banner").display = true
            SetUpPatternBanner(setupSetlistPanel.selectablePatterns[patternIndex].pattern.patternMetadata,
                element.Q("Pattern-Banner"))
        else
            dropTarget.visible = true
            element.Q("eyecatch").display = false
            element.Q("default-eyecatch").display = false
            element.Q("title-container").display = false
            element.Q("Pattern-Banner").display = false
        end
    end

    setupSetlistPanel.panel.Q("play-button").SetEnabled(
        setupSetlistPanel.selectedPatternIndex[1] != -1 and
        setupSetlistPanel.selectedPatternIndex[2] != -1 and
        setupSetlistPanel.selectedPatternIndex[3] != -1)
end

setupSetlistPanel.Initialize()