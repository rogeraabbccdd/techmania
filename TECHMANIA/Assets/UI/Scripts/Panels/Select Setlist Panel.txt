selectSetlistPanel = {
    panel = tm.root.Q("select-setlist-panel"),

    location = "",
    needsRefresh = false,
    inEditor = false,

    filter = {
        keywords = {},
        keywordsPreSplit = "",  -- for display
        showSetlistsInAllFolders = false,
        -- Possible values: Title, ModifiedTime, Level
        sortBasis = "Title",
        -- key: enum, value: display string
        sortBasisDisplayString = {},
        ascending = true
    },
    
    selectedSetlistFolder = "",
    selectedSetlist = nil,

    -- Key: eyecatch element, value: bool
    eyecatchVisible = {},
    -- Key: eyecatch element, value: string
    eyecatchFullPath = {}
}

setlistFilterSideSheet = {
    bg = selectSetlistPanel.panel.Q("filter-sidesheet-background"),
    sheet = selectSetlistPanel.panel.Q("filter-sidesheet-background").Q("filter-sidesheet")
}

newSetlistDialog = {
    bg = selectSetlistPanel.panel.Q("new-setlist-dialog-bg"),
    dialog = selectSetlistPanel.panel.Q("new-setlist-dialog-bg").Q("new-setlist-dialog")
}

function CompareSetlists(setlistInFolder1, setlistInFolder2)
    local s1 = setlistInFolder1.setlist
    local s2 = setlistInFolder2.setlist
    local basis1, bases2

    function CalculateAverageLevel(setlist)
        local totalLevel = 0
        local numPatterns = 0
        for _, patternRef in ipairs(setlist.selectablePatterns) do
            totalLevel = totalLevel + patternRef.patternLevel
            numPatterns = numPatterns + 1
        end
        for _, hiddenPattern in ipairs(setlist.hiddenPatterns) do
            local patternRef = hiddenPattern.reference
            totalLevel = totalLevel + patternRef.patternLevel
            numPatterns = numPatterns + 1
        end
        return totalLevel / numPatterns
    end

    if (selectSetlistPanel.filter.sortBasis == "Title") then
        basis1 = s1.setlistMetadata.title
        basis2 = s2.setlistMetadata.title
    elseif (selectSetlistPanel.filter.sortBasis == "ModifiedTime") then
        basis1 = setlistInFolder1.modifiedTime
        basis2 = setlistInFolder2.modifiedTime
    elseif (selectSetlistPanel.filter.sortBasis == "Level") then
        basis1 = CalculateAverageLevel(s1)
        basis2 = CalculateAverageLevel(s2)
    end

    if (selectSetlistPanel.filter.ascending) then
        return basis1 < basis2
    else
        return basis1 > basis2
    end
end

selectSetlistPanel.ClearAllCards = function()
    local panel = selectSetlistPanel.panel

    panel.UnregisterCallback(eventType.FrameUpdate, selectSetlistPanel.UpdateEyecatches)

    for element, visible in pairs(selectSetlistPanel.eyecatchVisible) do
        if (visible) then ReleaseEyecatch(element) end
    end

    local subfolderContainer = panel.Q("subfolder-container")
    for _, card in ipairs(subfolderContainer.Children()) do
        controls.DisposeScrollingText(card.Q("name-container"))
    end
    subfolderContainer.RemoveAllChildren()
    
    local setlistContainer = panel.Q("setlist-container")
    for _, card in ipairs(setlistContainer.Children()) do
        controls.DisposeScrollingText(card.Q("name-container"))
        controls.DisposeScrollingText(card.Q("description-container"))
    end
    setlistContainer.RemoveAllChildren()
end

selectSetlistPanel.SpawnAllCards = function()
    local panel = selectSetlistPanel.panel

    if (selectSetlistPanel.filter.showSetlistsInAllFolders) then
        selectSetlistPanel.location = tm.paths.GetSetlistRootFolder()
    end
    if (selectSetlistPanel.inEditor and tm.paths.IsInStreamingAssets(selectSetlistPanel.location)) then
        selectSetlistPanel.location = tm.paths.GetSetlistRootFolder()
    end

    panel.Q("location-display").text = tm.paths.HidePlatformInternalPath(selectSetlistPanel.location)
    panel.Q("up-button").SetEnabled(selectSetlistPanel.location != tm.paths.GetSetlistRootFolder())

    local subfolderContainer = panel.Q("subfolder-container")
    local setlistContainer = panel.Q("setlist-container")

    local anythingInFolder = false
    local hiddenSetlists = 0

    -- Prepare the subfolder list, setlist list and error list.
    local subfolders = {}
    local setlistsInFolder = {}
    local setlistsWithError = {}
    if (selectSetlistPanel.filter.showSetlistsInAllFolders) then
        function SearchAndProcessFolder(folder)
            for _, setlistInFolder in ipairs(tm.resources.GetSetlistsInFolder(folder)) do
                table.insert(setlistsInFolder, setlistInFolder)
            end
            for _, setlistWithError in ipairs(tm.resources.GetSetlistsWithError(folder)) do
                table.insert(setlistsWithError, setlistWithError)
            end
            for _, subfolder in ipairs(tm.resources.GetSetlistSubfolders(folder)) do
                SearchAndProcessFolder(subfolder.fullPath)
            end
        end
        SearchAndProcessFolder(selectSetlistPanel.location)
    else
        subfolders = tm.resources.GetSetlistSubfolders(selectSetlistPanel.location)
        setlistsInFolder = tm.resources.GetSetlistsInFolder(selectSetlistPanel.location)
        setlistsWithError = tm.resources.GetSetlistsWithError(selectSetlistPanel.location)
    end

    -- TODO: move setlists to error list if any is true:
    -- * any pattern is missing
    -- * selectable patterns < 3
    -- * hidden patterns < 1

    -- Reset the eyecatch list. Eyecatches will be dynamically loaded and unloaded as they enter and leave the screen.
    selectSetlistPanel.eyecatchVisible = {}
    selectSetlistPanel.eyecatchFullPath = {}

    -- Render lists as cards.
    table.sort(subfolders, function(s1, s2)
        return s1.name < s2.name
    end)
    for _, subfolder in ipairs(subfolders) do
        -- Skip subfolders in streaming assets if in editor.
        if (not selectSetlistPanel.inEditor or not tm.paths.IsInStreamingAssets(subfolder.fullPath)) then
            anythingInFolder = true
            local card = subfolderContainer.InstantiateTemplate("Assets/UI/Templates/Subfolder Card.uxml").Q("subfolder-card")
            if (subfolder.eyecatchFullPath != nil) then
                local eyecatchElement = card.Q("eyecatch")
                selectSetlistPanel.eyecatchVisible[eyecatchElement] = false
                selectSetlistPanel.eyecatchFullPath[eyecatchElement] = subfolder.eyecatchFullPath
            end
            controls.SetUpButtonSounds(card)
            card.Q("name").text = subfolder.name
            controls.SetUpScrollingText(card.Q("name-container"))
            card.RegisterCallback(eventType.Click, function(_, _, subfolder)
                selectSetlistPanel.location = subfolder.fullPath
                selectSetlistPanel.ClearAllCards()
                selectSetlistPanel.SpawnAllCards()
            end, subfolder)
        end
    end

    function SetlistContainsAnyFilterKeyword(metadata)
        if (#selectSetlistPanel.filter.keywords == 0) then
            return true
        end
        local title = net.string.ToLower(metadata.title)
        for _, keyword in ipairs(selectSetlistPanel.filter.keywords) do
            if (net.string.Contains(title, keyword)) then
                return true
            end
        end
        return false
    end

    table.sort(setlistsInFolder, function(setlistInFolder1, setlistInFolder2)
        return CompareSetlists(setlistInFolder1, setlistInFolder2)
    end)
    local cardOfPreviouslySelectedSetlist = nil
    for _, setlistInFolder in ipairs(setlistsInFolder) do
        -- Skip setlists in streaming assets if in editor.
        if (not selectSetlistPanel.inEditor or not tm.paths.IsInStreamingAssets(setlistInFolder.folder)) then
            anythingInFolder = true
            if (SetlistContainsAnyFilterKeyword(setlistInFolder.setlist.setlistMetadata)) then
                local card = setlistContainer.InstantiateTemplate("Assets/UI/Templates/Setlist Card.uxml").Q("setlist-card")

                -- Eyecatch
                card.Q("default-eyecatch").text = tm.l10n.GetString("eyecatch_no_image_text")
                card.Q("error-icon").visible = false
                card.Q("new-setlist-icon").visible = false

                local eyecatchPath = tm.paths.Combine(setlistInFolder.folder, setlistInFolder.setlist.setlistMetadata.eyecatchImage)
                local eyecatchElement = card.Q("eyecatch")
                selectSetlistPanel.eyecatchVisible[eyecatchElement] = false
                selectSetlistPanel.eyecatchFullPath[eyecatchElement] = eyecatchPath

                -- Sounds
                controls.SetUpButtonSounds(card)

                -- Name
                local setlist = setlistInFolder.setlist
                card.Q("name").text = setlist.setlistMetadata.title
                controls.SetUpScrollingText(card.Q("name-container"))

                -- Description
                card.Q("description").text = setlist.setlistMetadata.description
                controls.SetUpScrollingText(card.Q("description-container"))

                -- Control scheme icon
                local scheme = setlist.setlistMetadata.controlScheme
                local schemeIconContainer = card.Q("scheme-icon-container")
                schemeIconContainer.Q("touch-icon").display = scheme == tm.enum.controlScheme.Touch
                schemeIconContainer.Q("keys-icon").display = scheme == tm.enum.controlScheme.Keys
                schemeIconContainer.Q("km-icon").display = scheme == tm.enum.controlScheme.KM

                -- Level
                local minLevel = 65535
                local maxLevel = -65535
                for _, patternRef in ipairs(setlist.selectablePatterns) do
                    local level = patternRef.patternLevel
                    if (level < minLevel) then minLevel = level end
                    if (level > maxLevel) then maxLevel = level end
                end
                for _, hiddenPattern in ipairs(setlist.hiddenPatterns) do
                    local level = hiddenPattern.reference.patternLevel
                    if (level < minLevel) then minLevel = level end
                    if (level > maxLevel) then maxLevel = level end
                end
                card.Q("level").text = tostring(minLevel) .. " - " .. tostring(maxLevel)

                -- Event handler
                card.RegisterCallback(eventType.Click, function(_, _, setlistInFolder)
                    if (selectSetlistPanel.inEditor) then
                        editorSetlistSetupPanel.setlistFolder = setlistInFolder.folder
                        navigation.TransitionTo(selectSetlistPanel, editorSetlistSetupPanel)
                    else
                        -- Navigate to setlist setup panel.
                        -- selectSetlistPanel.selectedSetlistFolder = setlistInFolder.folder
                        -- local setlistPath = tm.paths.Combine(setlistInFolder.folder, tm.paths.kSetlistFilename)
                        -- selectSetlistPanel.selectedSetlist = setlist
                        -- navigation.TransitionTo(selectSetlistPanel, ???)
                    end
                end, setlistInFolder)

                -- Previously selected setlist
                if (selectSetlistPanel.selectedSetlist != nil and
                    setlistInFolder.setlist.setlistMetadata.guid ==
                    selectSetlistPanel.selectedSetlist.setlistMetadata.guid) then
                    cardOfPreviouslySelectedSetlist = card
                end
            else
                hiddenSetlists = hiddenSetlists + 1
            end
        end
    end

    for _, setlistWithError in ipairs(setlistsWithError) do
        anythingInFolder = true
        local card = setlistContainer.InstantiateTemplate("Assets/UI/Templates/Setlist Card.uxml").Q("setlist-card")
        card.Q("eyecatch").visible = false
        card.Q("default-eyecatch").visible = false
        card.Q("error-icon").visible = true
        card.Q("new-setlist-icon").visible = false
        controls.SetUpButtonSounds(card)
        local errorMessage = ""
        if (setlistWithError.type == "Load") then
            card.Q("name").text = tm.l10n.GetString("select_setlist_error_card_title")
            errorMessage = net.string.Format(tm.l10n.GetString("select_setlist_error_format"),
                setlistWithError.status.filePath,
                setlistWithError.status.errorMessage)
        elseif (setlistWithError.type == "Upgrade") then
            card.Q("name").text = tm.l10n.GetString("select_setlist_upgrade_error_card_title")
            errorMessage = net.string.Format(tm.l10n.GetString("select_setlist_upgrade_error_format"),
                setlistWithError.status.filePath,
                setlistWithError.status.errorMessage)
        end
        card.Q("description").text = tm.l10n.GetString("select_setlist_error_card_description")
        controls.SetUpScrollingText(card.Q("name-container"))
        controls.SetUpScrollingText(card.Q("description-container"))
        card.Q("scheme-icon-container").display = false
        card.Q("level").text = ""
        card.RegisterCallback(eventType.Click, function(_, _, errorMessage)
            alertBox.Alert(errorMessage)
        end, errorMessage)
    end

    if (selectSetlistPanel.inEditor) then
        local card = setlistContainer.InstantiateTemplate("Assets/UI/Templates/Setlist Card.uxml").Q("setlist-card")
        card.Q("eyecatch").visible = false
        card.Q("default-eyecatch").visible = false
        card.Q("error-icon").visible = false
        card.Q("new-setlist-icon").visible = true
        controls.SetUpButtonSounds(card)
        card.Q("name").text = tm.l10n.GetString("select_setlist_new_setlist_card_title")
        card.Q("description").text = ""
        controls.SetUpScrollingText(card.Q("name-container"))
        controls.SetUpScrollingText(card.Q("description-container"))
        card.Q("scheme-icon-container").display = false
        card.Q("level").text = ""
        card.RegisterCallback(eventType.Click, function()
            FadeInDialog(newSetlistDialog.bg, newSetlistDialog.dialog)
        end)
    end

    if (hiddenSetlists > 0) then
        panel.Q("setlist-status").text = net.string.Format(
            tm.l10n.GetString("select_setlist_some_setlists_hidden_text"),
            hiddenSetlists,
            selectSetlistPanel.filter.keywordsPreSplit)
    elseif (not anythingInFolder) then
        panel.Q("setlist-status").text = tm.l10n.GetString("select_setlist_no_setlist_text")
    else
        panel.Q("setlist-status").text = ""
    end

    if (cardOfPreviouslySelectedSetlist != nil) then
        cardOfPreviouslySelectedSetlist.Focus()
        tm.StartCoroutine(function()
            coroutine.yield()  -- for layout update
            panel.Q("scroll-view").ScrollTo(cardOfPreviouslySelectedSetlist)
        end)
    end

    panel.RegisterCallback(eventType.FrameUpdate, selectSetlistPanel.UpdateEyecatches)
end

selectSetlistPanel.Show = function()
    tm.SetDiscordActivity("", tm.l10n.GetString("discord_state_selecting_setlist"))
    controls.ResetScrollingTextTimer()

    if (selectSetlistPanel.needsRefresh) then
        selectSetlistPanel.Refresh()  -- Will call Show when done
        return
    end
    
    selectSetlistPanel.SpawnAllCards()
    selectSetlistPanel.panel.Q("upgrade-button").display = tm.resources.anyOutdatedSetlist
end

selectSetlistPanel.Hide = function()
    selectSetlistPanel.ClearAllCards()
    -- When creating a new setlist and transitioning to editor, hide
    -- the new setlist dialog so it isn't visible when transitioning back.
    newSetlistDialog.Hide()
end

selectSetlistPanel.Refresh = function()
    selectSetlistPanel.ClearAllCards()
    local panel = selectSetlistPanel.panel
    selectSetlistPanel.location = tm.paths.GetSetlistRootFolder()
    selectSetlistPanel.needsRefresh = false
    panel.Q("back-button").SetEnabled(false)
    panel.Q("location-display").text = tm.paths.HidePlatformInternalPath(selectSetlistPanel.location)
    tm.io.ReloadSetlistList(function(currentlyLoadingFile)
        panel.Q("setlist-status").text = currentlyLoadingFile
    end,
    function(reloadStatus)
        panel.Q("back-button").SetEnabled(true)
        selectSetlistPanel.Show()
    end)
end

selectSetlistPanel.Initialize = function()
    selectSetlistPanel.location = tm.paths.GetSetlistRootFolder()

    local panel = selectSetlistPanel.panel
    panel.Q("refresh-button").RegisterCallback(eventType.Click, function()
        selectSetlistPanel.Refresh()
    end)

    local sidesheetBg = setlistFilterSideSheet.bg
    sidesheetBg.display = false
    panel.Q("filter-button").RegisterCallback(eventType.Click, function()
        if (sidesheetBg.display) then
            setlistFilterSideSheet.FadeOut()
        else
            setlistFilterSideSheet.Show()
            setlistFilterSideSheet.FadeIn()
        end
    end)

    panel.Q("upgrade-button").RegisterCallback(eventType.Click, function()
        alertBox.Confirm(tm.l10n.GetString("select_setlist_upgrade_version_confirmation"),
            tm.l10n.GetString("select_setlist_upgrade_version_confirm"),
            tm.l10n.GetString("select_setlist_upgrade_version_cancel"),
            function()
                selectSetlistPanel.ClearAllCards()
                panel.Q("back-button").SetEnabled(false)
                tm.io.UpgradeAllSetlists(function(currentlyLoadingFile)
                    panel.Q("setlist-status").text = currentlyLoadingFile
                end,
                function(reloadStatus)
                    panel.Q("back-button").SetEnabled(true)
                    selectSetlistPanel.Show()
                    if (reloadStatus.Ok()) then
                        alertBox.Alert(tm.l10n.GetString("select_setlist_upgrade_complete_message"))
                    else
                        alertBox.Alert(net.string.Format(
                            tm.l10n.GetString("select_setlist_upgrade_process_error_format"),
                            reloadStatus.errorMessage))
                    end
                end)
            end)
    end)

    panel.Q("up-button").RegisterCallback(eventType.Click, function()
        selectSetlistPanel.location = tm.paths.GoUpFrom(selectSetlistPanel.location)
        selectSetlistPanel.ClearAllCards()
        selectSetlistPanel.SpawnAllCards()
    end)

    panel.Q("open-button").RegisterCallback(eventType.Click, function()
        tm.OpenURL(selectSetlistPanel.location)
    end)
end

selectSetlistPanel.UpdateEyecatches = function()
    -- When transitioning away from the panel, there may be 1 frame when the panel's display is set to false,
    -- but this update is still called because Hide() hasn't been called yet. In this frame, card layouts are
    -- messed up because the panel is not displayed, and we don't want to load a bunch of eyecatches. Therefore,
    -- we check whether the panel is displayed before doing anything.
    if (not selectSetlistPanel.panel.display) then return end

    local screenHeight = unity.screen.height
    for element, visible in pairs(selectSetlistPanel.eyecatchVisible) do
        local screenPosition = element.LocalSpaceToScreenSpace(unity.vector2.__new(0, 0))
        local shouldBeVisible = (screenPosition.y >= 0) and (screenPosition.y <= screenHeight)
        if (visible and not shouldBeVisible) then
            ReleaseEyecatch(element)
            selectSetlistPanel.eyecatchVisible[element] = false
        elseif (not visible and shouldBeVisible) then
            LoadAndShowEyecatch(selectSetlistPanel.eyecatchFullPath[element], element)
            selectSetlistPanel.eyecatchVisible[element] = true
        end
    end
end

setlistFilterSideSheet.SetDropdownValues = function()
    local sortBasisDropdown = setlistFilterSideSheet.sheet.Q("sort-by").Q("dropdown")
    sortBasisDropdown.SetValueWithoutNotify(selectSetlistPanel.filter.sortBasisDisplayString[selectSetlistPanel.filter.sortBasis])
end

setlistFilterSideSheet.Show = function()
    local sheet = setlistFilterSideSheet.sheet

    sheet.Q("keyword-field").Q("text-field").stringValue = selectSetlistPanel.filter.keywordsPreSplit

    controls.SetToggleIsOn(sheet.Q("all-folders").Q("track"), selectSetlistPanel.filter.showSetlistsInAllFolders)

    setlistFilterSideSheet.SetDropdownValues()

    local ascendingRadioButton = sheet.Q("ascending-radio").Q("radio-button")
    local descendingRadioButton = sheet.Q("descending-radio").Q("radio-button")
    if (selectSetlistPanel.filter.ascending) then
        controls.SetRadioButton(ascendingRadioButton, {ascendingRadioButton, descendingRadioButton})
    else
        controls.SetRadioButton(descendingRadioButton, {ascendingRadioButton, descendingRadioButton})
    end
end

setlistFilterSideSheet.FadeIn = function()
    local bg = setlistFilterSideSheet.bg
    bg.display = true
    tm.StartCoroutine(function()
        FadeInCoroutine(bg.Q("filter-sidesheet"), 100, 0)
    end)
end

setlistFilterSideSheet.FadeOut = function()
    local bg = setlistFilterSideSheet.bg
    tm.StartCoroutine(function()
        FadeOutCoroutine(bg.Q("filter-sidesheet"), 100, 0, function()
            bg.display = false
        end)
    end)
end

setlistFilterSideSheet.Initialize = function()
    local bg = setlistFilterSideSheet.bg
    bg.RegisterCallback(eventType.Click, function()
        tm.audio.PlaySfx(tm.io.LoadAudioFromTheme("Assets/UI/SFX/Back.wav"))
        setlistFilterSideSheet.FadeOut()
    end)

    bg.Q("filter-sidesheet").RegisterCallback(eventType.Click, function(element, event)
        -- Prevents bg from receiving this event on the bubble up phase
        event.StopPropagation()
    end)

    bg.Q("close-button").RegisterCallback(eventType.Click, function()
        setlistFilterSideSheet.FadeOut()
    end)

    bg.Q("keyword-field").Q("text-field").RegisterCallback(eventType.ChangeString, function(element, event)
        selectSetlistPanel.filter.keywordsPreSplit = net.string.Trim(event.newValue)
        local keywords = net.string.Split(selectSetlistPanel.filter.keywordsPreSplit, ' ')
        selectSetlistPanel.filter.keywords = {}
        for _, keyword in ipairs(keywords) do
            if (net.string.Length(keyword) > 0) then
                table.insert(selectSetlistPanel.filter.keywords, net.string.ToLower(keyword))
            end
        end
        selectSetlistPanel.ClearAllCards()
        selectSetlistPanel.SpawnAllCards()
    end)

    bg.Q("all-folders").Q("track").RegisterCallback(eventType.Click, function()
        selectSetlistPanel.filter.showSetlistsInAllFolders = not selectSetlistPanel.filter.showSetlistsInAllFolders
        selectSetlistPanel.ClearAllCards()
        selectSetlistPanel.SpawnAllCards()
    end)

    function LocalizeDropdown()
        local bg = setlistFilterSideSheet.bg
        selectSetlistPanel.filter.sortBasisDisplayString = {
            Title = tm.l10n.GetString("setlist_filter_sidesheet_sort_basis_title"),
            ModifiedTime = tm.l10n.GetString("setlist_filter_sidesheet_sort_basis_modified_time"),
            Level = tm.l10n.GetString("setlist_filter_sidesheet_sort_basis_level")
        }
        local sortBasisChoices = {}
        for _, display in pairs(selectSetlistPanel.filter.sortBasisDisplayString) do
            table.insert(sortBasisChoices, display)
        end
        local sortBasisDropdown = bg.Q("sort-by").Q("dropdown")
        sortBasisDropdown.choices = sortBasisChoices
    end
    LocalizeDropdown()
    table.insert(callbacksOnLocaleChange, function()
        LocalizeDropdown()
        setlistFilterSideSheet.SetDropdownValues()
    end)
    local sortBasisDropdown = bg.Q("sort-by").Q("dropdown")
    sortBasisDropdown.RegisterCallback(eventType.ChangeString, function(element, event)
        selectSetlistPanel.filter.sortBasis = KeyFromValue(selectSetlistPanel.filter.sortBasisDisplayString, event.newValue)
        selectSetlistPanel.ClearAllCards()
        selectSetlistPanel.SpawnAllCards()
    end)

    local ascendingRadioButton = bg.Q("ascending-radio").Q("radio-button")
    local descendingRadioButton = bg.Q("descending-radio").Q("radio-button")
    ascendingRadioButton.RegisterCallback(eventType.Click, function()
        controls.SetRadioButton(ascendingRadioButton, {ascendingRadioButton, descendingRadioButton})
        selectSetlistPanel.filter.ascending = true
        selectSetlistPanel.ClearAllCards()
        selectSetlistPanel.SpawnAllCards()
    end)
    descendingRadioButton.RegisterCallback(eventType.Click, function()
        controls.SetRadioButton(descendingRadioButton, {ascendingRadioButton, descendingRadioButton})
        selectSetlistPanel.filter.ascending = false
        selectSetlistPanel.ClearAllCards()
        selectSetlistPanel.SpawnAllCards()
    end)
end

newSetlistDialog.Initialize = function()
    local bg = newSetlistDialog.bg
    local dialog = newSetlistDialog.dialog

    bg.display = false
    dialog.Q("create-button").RegisterCallback(eventType.Click, function()
        local title = dialog.Q("title-field").Q("text-field").stringValue
        local status, newSetlistFolder = tm.editor.CreateNewSetlist(selectSetlistPanel.location, title)
        if (status.Ok()) then
            editorSetlistSetupPanel.setlistFolder = newSetlistFolder
            navigation.TransitionTo(selectSetlistPanel, editorSetlistSetupPanel)
        else
            FadeOutDialog(bg, dialog)
            alertBox.Alert(
                tm.paths.HidePlatformInternalPath(net.string.Format(
                    tm.l10n.GetString("new_setlist_error_format"),
                    status.filePath,
                    status.errorMessage)))
        end
    end)
    dialog.Q("cancel-button").RegisterCallback(eventType.Click, function()
        FadeOutDialog(bg, dialog)
    end)
    bg.RegisterCallback(eventType.Click, function()
        tm.audio.PlaySfx(tm.io.LoadAudioFromTheme("Assets/UI/SFX/Back.wav"))
        FadeOutDialog(bg, dialog)
    end)

    dialog.RegisterCallback(eventType.Click, function(_, event)
        -- Prevents bg from receiving this event on the bubble up phase
        event.StopPropagation()
    end)
end

newSetlistDialog.Hide = function()
    newSetlistDialog.bg.display = false
end

selectSetlistPanel.Initialize()
setlistFilterSideSheet.Initialize()
newSetlistDialog.Initialize()