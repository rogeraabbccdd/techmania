resultPanel = {
    panel = tm.root.Q("result-panel")
}

resultPanel.Initialize = function()
    resultPanel.panel.Q("performance-graph").SetMeshGeneratorFunction(function(element, context)
        local painter = context.painter2D
        local width = element.contentRect.width
        local height = element.contentRect.height
        local padding = 20

        painter.lineWidth = 2
        painter.strokeColor = unity.color.__new(114 / 256, 202 / 256, 249 / 256, 0.6)

        if (#gamePanel.performanceOnAllNotes == 0) then
            -- Special case: just draw HP line
            painter.BeginPath()
            painter.MoveTo(unity.vector2.__new(padding, padding))
            painter.LineTo(unity.vector2.__new(width - padding, padding))
            painter.Stroke()
            return
        end

        local minTime = gamePanel.performanceOnAllNotes[1].correctTime
        if (minTime > 0) then minTime = 0 end
        local maxTime = gamePanel.performanceOnAllNotes[#gamePanel.performanceOnAllNotes].correctTime

        local function Denormalize(x, y)  -- both in [0, 1]
            return unity.vector2.__new(
                unity.mathf.Lerp(padding, width - padding, x),
                unity.mathf.Lerp(padding, height - padding, y)
            )
        end

        -- HP graph
        painter.BeginPath()
        painter.MoveTo(unity.vector2.__new(padding, padding))
        local previousHp = 1
        for _, performance in ipairs(gamePanel.performanceOnAllNotes) do
            local time = performance.correctTime
            local t = unity.mathf.InverseLerp(minTime, maxTime, time)

            local hp = performance.HPAfterNote

            painter.LineTo(Denormalize(t, 1 - previousHp))
            painter.LineTo(Denormalize(t, 1 - hp))
            previousHp = hp
        end
        painter.Stroke()

        -- Time differences
        for _, performance in ipairs(gamePanel.performanceOnAllNotes) do
            local time = performance.correctTime
            local t = unity.mathf.InverseLerp(minTime, maxTime, time)

            local judgement = performance.judgement

            local timeDifference = performance.timeDifference
            if (not net.float.IsInfinity(timeDifference)) then
                local y = unity.mathf.InverseLerp(-0.2, 0.2, timeDifference)
                local center = Denormalize(t, y)
                painter.BeginPath()
                painter.MoveTo(unity.vector2.__new(center.x - 4, center.y - 4))
                painter.LineTo(unity.vector2.__new(center.x + 4, center.y - 4))
                painter.LineTo(unity.vector2.__new(center.x + 4, center.y + 4))
                painter.LineTo(unity.vector2.__new(center.x - 4, center.y + 4))
                painter.ClosePath()

                if (judgement == tm.enum.judgement.RainbowMax) then
                    painter.fillColor = unity.color.__new(245 / 255, 124 / 255, 0)
                elseif (judgement == tm.enum.judgement.Max) then
                    painter.fillColor = unity.color.__new(56 / 255, 142 / 255, 60 / 255)
                elseif (judgement == tm.enum.judgement.Cool) then
                    painter.fillColor = unity.color.__new(194 / 255, 24 / 255, 91 / 255)
                elseif (judgement == tm.enum.judgement.Good) then
                    painter.fillColor = unity.color.__new(25 / 255, 118 / 255, 210 / 255)
                elseif (judgement == tm.enum.judgement.Miss) then
                    painter.fillColor = unity.color.__new(123 / 255, 31 / 255, 162 / 255)
                elseif (judgement == tm.enum.judgement.Break) then
                    painter.fillColor = unity.color.__new(211 / 255, 47 / 255, 47 / 255)
                end

                painter.Fill()
            end
        end
    end)
end

resultPanel.Show = function()
    local panel = resultPanel.panel
    local trackMetadata = selectTrackPanel.selectedFullTrack.trackMetadata
    local pattern = selectPatternPanel.selectedPattern
    local patternMetadata = pattern.patternMetadata
    local scoreKeeper = tm.game.scoreKeeper

    controls.ResetScrollingTextTimer()

    -- Panel title
    local panelTitle = panel.Q("top-bar").Q("title")
    if (scoreKeeper.stageFailed) then
        panelTitle.text = tm.l10n.GetString("result_panel_stage_failed_title")
    else
        panelTitle.text = tm.l10n.GetString("result_panel_stage_clear_title")
    end

    -- Track metadata
    local eyecatchPath = tm.paths.Combine(selectTrackPanel.selectedTrackFolder, trackMetadata.eyecatchImage)
    LoadAndShowEyecatch(eyecatchPath, panel.Q("eyecatch"))
    panel.Q("title-container").Q("title").text = trackMetadata.title
    panel.Q("artist-container").Q("artist").text = trackMetadata.artist

    -- Pattern metadata
    local patternBanner = panel.Q("pattern-banner")
    SetUpPatternBanner(patternMetadata, patternBanner)
    patternBanner.Q("medal-container").display = false

    -- Tally
    local tally = panel.Q("judgement-tally")
    local tallyLabels = tally.Q("labels")
    local tallyValues = tally.Q("values")
    if (tm.ruleset.comboBonus) then
        tallyLabels.Q("combo-bonus").display = true
        tallyValues.Q("combo-bonus").display = true
    else
        tallyLabels.Q("combo-bonus").display = false
        tallyValues.Q("combo-bonus").display = false
    end
    tallyValues.Q("rainbow-max").text = tostring(scoreKeeper.NumNotesWithJudgement(tm.enum.judgement.RainbowMax))
    tallyValues.Q("max").text = tostring(scoreKeeper.NumNotesWithJudgement(tm.enum.judgement.Max))
    tallyValues.Q("cool").text = tostring(scoreKeeper.NumNotesWithJudgement(tm.enum.judgement.Cool))
    tallyValues.Q("good").text = tostring(scoreKeeper.NumNotesWithJudgement(tm.enum.judgement.Good))
    tallyValues.Q("miss").text = tostring(scoreKeeper.NumNotesWithJudgement(tm.enum.judgement.Miss))
    tallyValues.Q("break").text = tostring(scoreKeeper.NumNotesWithJudgement(tm.enum.judgement.Break))
    tallyValues.Q("max-combo").text = tostring(scoreKeeper.maxCombo)
    tallyValues.Q("fever-bonus").text = tostring(scoreKeeper.totalFeverBonus)
    tallyValues.Q("combo-bonus").text = tostring(scoreKeeper.ComboBonus())

    -- Score and rank
    local score = scoreKeeper.TotalScore()
    panel.Q("total-score").Q("value").text = tostring(score)

    local medal = scoreKeeper.Medal()
    local medalString = ""
    if (medal == tm.enum.performanceMedal.AllCombo) then
        medalString = tm.l10n.GetString("performance_medal_all_combo")
    elseif (medal == tm.enum.performanceMedal.PerfectPlay) then
        medalString = tm.l10n.GetString("performance_medal_perfect_play")
    elseif (medal == tm.enum.performanceMedal.AbsolutePerfect) then
        medalString = tm.l10n.GetString("performance_medal_absolute_perfect")
    end
    panel.Q("total-score").Q("medal").text = medalString

    panel.Q("rank").Q("value").text = scoreKeeper.Rank()

    -- Record
    local record = tm.records.GetRecord(pattern)
    local recordString = "---"
    if (record != nil) then
        recordString = record.score .. "   " .. record.Rank()
    end
    panel.Q("my-record").Q("value").text = recordString
    
    if (tm.game.ScoreIsValid() and tm.game.ScoreIsNewRecord()) then
        panel.Q("my-record").Q("new-record-indicator").display = true
        tm.game.UpdateRecord()
        tm.records.SaveToFile()
    else
        panel.Q("my-record").Q("new-record-indicator").display = false
    end

    -- Ruleset
    local rulesetString = ""
    panel.Q("legacy-override-indicator").display = false
    if (tm.options.ruleset == tm.enum.ruleset.Standard) then
        rulesetString = tm.l10n.GetString("ruleset_standard")
    elseif (tm.options.ruleset == tm.enum.ruleset.Legacy) then
        rulesetString = tm.l10n.GetString("ruleset_legacy")
        if (selectPatternPanel.selectedPattern.legacyRulesetOverride.HasAny()) then
            rulesetString = rulesetString .. "*"
            panel.Q("legacy-override-indicator").display = true
        end
    elseif (tm.options.ruleset == tm.enum.ruleset.Custom) then
        rulesetString = tm.l10n.GetString("ruleset_custom")
    end
    panel.Q("ruleset").Q("value").text = rulesetString

    -- Modifiers
    panel.Q("modifiers").Q("content").text = CurrentModifiersToString(--[[includeNoVideo=]]false)

    -- Performance graph
    table.sort(gamePanel.performanceOnAllNotes, function(p1, p2)
        return p1.correctTime < p2.correctTime
    end)
    panel.Q("performance-graph").MarkDirtyRepaint()

    tm.game.Conclude()
end

resultPanel.Hide = function()
    ReleaseEyecatch(resultPanel.panel.Q("eyecatch"))
end

resultPanel.Initialize()