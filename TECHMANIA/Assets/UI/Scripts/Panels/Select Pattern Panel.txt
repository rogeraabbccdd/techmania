selectPatternPanel = {
    panel = tm.root.Q("select-pattern-panel"),
    
    allPatternRadioButtons = {},

    previewPlaybackCoroutine = nil,
    previewTrack = nil,
    previewTrackChannel = nil,

    radarLayoutInitialized = false,
    radarOfSelectedPattern = nil,
    radarRadiusUnit = 13 / 20,
    
    selectedPattern = nil,
}

function RadarAngleForVertex(i)
    return (-90 + 72 * i) * unity.mathf.Deg2Rad
end

function SetUpControlSchemeIcon(originalScheme, iconContainer)
    local overrideScheme = originalScheme
    if (tm.options.modifiers.controlOverride == tm.enum.controlOverride.OverrideToTouch) then
        overrideScheme = tm.enum.controlScheme.Touch
    elseif (tm.options.modifiers.controlOverride == tm.enum.controlOverride.OverrideToKeys) then
        overrideScheme = tm.enum.controlScheme.Keys
    elseif (tm.options.modifiers.controlOverride == tm.enum.controlOverride.OverrideToKM) then
        overrideScheme = tm.enum.controlScheme.KM
    end

    if (overrideScheme == originalScheme) then
        iconContainer.RemoveFromClassList("scheme-override")
        iconContainer.AddToClassList("scheme-no-override")
    else
        iconContainer.RemoveFromClassList("scheme-no-override")
        iconContainer.AddToClassList("scheme-override")
    end
    local scheme = overrideScheme

    iconContainer.Q("touch-icon").display = scheme == tm.enum.controlScheme.Touch
    iconContainer.Q("keys-icon").display = scheme == tm.enum.controlScheme.Keys
    iconContainer.Q("km-icon").display = scheme == tm.enum.controlScheme.KM
end

-- To be reusable, this function does not:
-- * set up scrolling text
-- * display performance medal
function SetUpPatternBanner(patternMetadata, banner)
    -- Lanes icon
    banner.Q("2l-icon").display = patternMetadata.playableLanes == 2
    banner.Q("3l-icon").display = patternMetadata.playableLanes == 3
    banner.Q("4l-icon").display = patternMetadata.playableLanes == 4

    -- Scheme icon
    SetUpControlSchemeIcon(patternMetadata.controlScheme, banner.Q("scheme-icon-container"))

    -- Text
    banner.Q("level").text = patternMetadata.level
    banner.Q("pattern-name").text = patternMetadata.patternName
end

-- Currently selected pattern may be nil.
selectPatternPanel.ShowPatternDetails = function()
    local pattern = selectPatternPanel.selectedPattern
    local panel = selectPatternPanel.panel

    function ShowRadar()
        local radarElement = panel.Q("radar")
        if (pattern == nil) then
            selectPatternPanel.radarOfSelectedPattern = nil
            radarElement.Q("density").Q("value").text = "0"
            radarElement.Q("peak").Q("value").text = "0"
            radarElement.Q("speed").Q("value").text = "0"
            radarElement.Q("chaos").Q("value").text = "0"
            radarElement.Q("async").Q("value").text = "0"
        else
            selectPatternPanel.radarOfSelectedPattern = pattern.CalculateRadar()
            radarElement.Q("density").Q("value").text = tostring(selectPatternPanel.radarOfSelectedPattern.density.normalized)
            radarElement.Q("peak").Q("value").text = tostring(selectPatternPanel.radarOfSelectedPattern.peak.normalized)
            radarElement.Q("speed").Q("value").text = tostring(selectPatternPanel.radarOfSelectedPattern.speed.normalized)
            radarElement.Q("chaos").Q("value").text = tostring(selectPatternPanel.radarOfSelectedPattern.chaos.normalized)
            radarElement.Q("async").Q("value").text = tostring(selectPatternPanel.radarOfSelectedPattern.async.normalized)
        end
        radarElement.MarkDirtyRepaint()
    end

    if (pattern == nil) then
        panel.Q("bpm").Q("content").text = ""
        panel.Q("length").Q("content").text = ""
        panel.Q("notes").Q("content").text = ""
        panel.Q("author").Q("content").text = ""
        panel.Q("record").Q("content").text = ""
        panel.Q("record").Q("medal-text").text = ""
        ShowRadar()
        return
    end

    -- This also enables radar calculation.
    pattern.PrepareForTimeCalculation()

    -- BPM range
    local minBpm = pattern.patternMetadata.initBpm
    local maxBpm = minBpm
    for _, e in ipairs(pattern.bpmEvents) do
        if (e.bpm < minBpm) then minBpm = e.bpm end
        if (e.bpm > maxBpm) then maxBpm = e.bpm end
    end
    function FormatBpm(bpm)
        local rounded = unity.mathf.RoundToInt(bpm)
        if (unity.mathf.Abs(rounded - bpm) < unity.mathf.Epsilon) then
            return tostring(rounded)
        else
            return net.string.DoubleToString(bpm, "F2")
        end
    end
    if (minBpm < maxBpm) then
        panel.Q("bpm").Q("content").text = FormatBpm(minBpm) .. " - " .. FormatBpm(maxBpm)
    else
        panel.Q("bpm").Q("content").text = FormatBpm(minBpm)
    end

    -- Length
    local length = 0
    -- This function returns void and has 2 out parameters
    _, length, _ = pattern.GetLengthInSecondsAndScans()
    local minutes = unity.mathf.FloorToInt(length / 60)
    local seconds = unity.mathf.FloorToInt(length - minutes * 60)
    if (seconds < 10) then 
        panel.Q("length").Q("content").text = minutes .. ":0" .. seconds
    else
        panel.Q("length").Q("content").text = minutes .. ":" .. seconds
    end

    -- Note count
    local noteCount = 0
    local notes = pattern.NotesAsList()
    for _, note in ipairs(notes) do
        if (note.lane < pattern.patternMetadata.playableLanes) then
            noteCount = noteCount + 1
        end
    end
    panel.Q("notes").Q("content").text = noteCount

    -- Author
    panel.Q("author").Q("content").text = pattern.patternMetadata.author

    -- Record
    local record = tm.records.GetRecord(pattern)
    if (record == nil) then
        panel.Q("record").Q("content").text = "---"
        panel.Q("record").Q("medal-text").text = ""
    else
        panel.Q("record").Q("content").text = record.score .. "   " .. record.Rank()
        local medal = record.medal
        if (medal == tm.enum.performanceMedal.NoMedal) then
            panel.Q("record").Q("medal-text").text = ""
        elseif (medal == tm.enum.performanceMedal.AllCombo) then
            panel.Q("record").Q("medal-text").text = tm.l10n.GetString("performance_medal_all_combo")
        elseif (medal == tm.enum.performanceMedal.PerfectPlay) then
            panel.Q("record").Q("medal-text").text = tm.l10n.GetString("performance_medal_perfect_play")
        elseif (medal == tm.enum.performanceMedal.AbsolutePerfect) then
            panel.Q("record").Q("medal-text").text = tm.l10n.GetString("performance_medal_absolute_perfect")
        end
    end

    -- Radar
    ShowRadar()
end

selectPatternPanel.ShowCurrentModifiers = function()
    local container = selectPatternPanel.panel.Q("modifier-display").Q("container")
    container.Q("content").text = CurrentModifiersToString(--[[includeNoVideo=]] true)
end

selectPatternPanel.Show = function()
    tm.SetDiscordActivity("", tm.l10n.GetString("discord_state_selecting_pattern"))
    controls.ResetScrollingTextTimer()

    local panel = selectPatternPanel.panel
    local track = selectTrackPanel.selectedFullTrack

    -- Load per-track options. TECHMANIA will create one if none exists, so this shouldn't be nil.
    selectTrackPanel.selectedTrackOptions = tm.options.GetPerTrackOptions(track.trackMetadata.guid)

    -- Display metadata.
    local eyecatchPath = tm.paths.Combine(selectTrackPanel.selectedTrackFolder, track.trackMetadata.eyecatchImage)
    LoadAndShowEyecatch(eyecatchPath, panel.Q("eyecatch"))
    panel.Q("metadata-wrap").Q("genre").text = track.trackMetadata.genre
    panel.Q("metadata-wrap").Q("title").text = track.trackMetadata.title
    panel.Q("metadata-wrap").Q("artist").text = track.trackMetadata.artist

    -- Display pattern list.
    panel.Q("pattern-list").Q("no-pattern-text").display = (#track.patterns == 0)
    local patternListContainer = panel.Q("pattern-list").Q("unity-content-container")
    selectPatternPanel.allPatternRadioButtons = {}
    for _, pattern in ipairs(track.patterns) do
        local radioButton = patternListContainer.InstantiateTemplate("Assets/UI/Templates/Pattern Radio Button.uxml").Q("radio-button")
        table.insert(selectPatternPanel.allPatternRadioButtons, radioButton)
        controls.SetUpButtonSounds(radioButton)

        SetUpPatternBanner(pattern.patternMetadata, radioButton.Q("pattern-banner"))
        controls.SetUpScrollingText(radioButton.Q("pattern-name-container"))

        -- Medal
        local record = tm.records.GetRecord(pattern)
        local medal = ""
        if (record != nil) then
            medal = record.medal
        end
        if (medal == tm.enum.performanceMedal.AbsolutePerfect or
            medal == tm.enum.performanceMedal.PerfectPlay) then
            radioButton.Q("perfect-play-icon").display = true
            radioButton.Q("all-combo-icon").display = false
        elseif (medal == tm.enum.performanceMedal.AllCombo) then
            radioButton.Q("perfect-play-icon").display = false
            radioButton.Q("all-combo-icon").display = true
        else
            radioButton.Q("perfect-play-icon").display = false
            radioButton.Q("all-combo-icon").display = false
        end

        radioButton.RegisterCallback(eventType.Click, function(_, _, pattern)
            selectPatternPanel.selectedPattern = pattern
            controls.SetRadioButton(radioButton, selectPatternPanel.allPatternRadioButtons)
            selectPatternPanel.ShowPatternDetails()
            panel.Q("play-button").SetEnabled(true)
        end, pattern)
    end
    controls.SetRadioButton(nil, selectPatternPanel.allPatternRadioButtons)

    -- Initialize details when no pattern is selected.
    selectPatternPanel.selectedPattern = nil
    selectPatternPanel.ShowPatternDetails()
    panel.Q("play-button").SetEnabled(false)
    selectPatternPanel.ShowCurrentModifiers()

    -- Initialize radar layout if entering the panel for the first time.
    if (not selectPatternPanel.radarLayoutInitialized) then
        selectPatternPanel.InitializeRadar()
    end

    -- Play preview.
    selectPatternPanel.StartPreviewTrackPlayback()
end

selectPatternPanel.Hide = function()
    ReleaseEyecatch(selectPatternPanel.panel.Q("eyecatch"))

    local patternListContainer = selectPatternPanel.panel.Q("pattern-list").Q("unity-content-container")
    for _, element in ipairs(patternListContainer.Children()) do
        controls.DisposeScrollingText(element.Q("pattern-name-container"))
    end
    patternListContainer.RemoveAllChildren()

    selectPatternPanel.StopPreviewTrackPlayback()

    if (modifierSidesheet.bg.display) then
        modifierSidesheet.FadeOut()
    end
end

selectPatternPanel.InitializeRadar = function()
    local radarElement = selectPatternPanel.panel.Q("radar")
    local radarCenterX = radarElement.contentRect.width * 0.5
    local radarCenterY = radarElement.contentRect.height * 0.5
    
    local radarDisplayWidth = radarElement.Q("density").contentRect.width
    local radarDisplayHeight = radarElement.Q("density").contentRect.height
    local radarDisplayDistance = selectPatternPanel.radarRadiusUnit * 100 + 40
    function PlaceRadarDisplay(element, vertex)
        element.style.left = unity.styleLength.__new(
            radarCenterX + radarDisplayDistance * unity.mathf.Cos(RadarAngleForVertex(vertex)) - radarDisplayWidth * 0.5)
        element.style.top = unity.styleLength.__new(
            radarCenterY + radarDisplayDistance * unity.mathf.Sin(RadarAngleForVertex(vertex)) - radarDisplayHeight * 0.5)
    end
    PlaceRadarDisplay(radarElement.Q("density"), 0)
    PlaceRadarDisplay(radarElement.Q("peak"), 1)
    PlaceRadarDisplay(radarElement.Q("speed"), 2)
    PlaceRadarDisplay(radarElement.Q("chaos"), 3)
    PlaceRadarDisplay(radarElement.Q("async"), 4)

    selectPatternPanel.radarLayoutInitialized = true
end

selectPatternPanel.Initialize = function()
    local panel = selectPatternPanel.panel

    panel.Q("modifiers-button").RegisterCallback(eventType.Click, function()
        modifierSidesheet.Show(--[[inSetlist=]] false)
        modifierSidesheet.FadeIn()
    end)

    panel.Q("play-button").RegisterCallback(eventType.Click, function()
        tm.audio.PlaySfx(tm.io.LoadAudioFromTheme("Assets/UI/SFX/Play.wav"))

        -- Populate game setup
        tm.gameSetup.setlist.enabled = false
        tm.gameSetup.trackFolder = selectTrackPanel.selectedTrackFolder
        tm.gameSetup.patternGuid = selectPatternPanel.selectedPattern.patternMetadata.guid

        -- Save options
        tm.options.SaveToFile()

        -- Navigation.txt will handle loading
    end)

    -- Set the function to draw radar graph. Actual drawing happens
    -- when selectPatternPanel.ShowPatternDetails calls ShowRadar.
    local radarElement = panel.Q("radar")
    radarElement.SetMeshGeneratorFunction(function(element, context)
        local painter = context.painter2D
        
        painter.lineWidth = 2
        painter.lineCap = unity.enum.lineCap.Round
        painter.lineJoin = unity.enum.lineJoin.Miter

        local majorStrokeAlpha = 0.12
        local minorStrokeAlpha = 0.05

        local radarElement = panel.Q("radar")
        local radarCenterX = radarElement.contentRect.width * 0.5
        local radarCenterY = radarElement.contentRect.height * 0.5

        -- Draw radii, lines from the center to vertices of the outmost pentagon
        painter.strokeColor = unity.color.__new(1, 1, 1, majorStrokeAlpha)
        for i = 1, 5 do
            local angle = RadarAngleForVertex(i)
            painter.BeginPath()
            painter.MoveTo(unity.vector2.__new(radarCenterX, radarCenterY))
            painter.LineTo(unity.vector2.__new(
                radarCenterX + selectPatternPanel.radarRadiusUnit * 100 * unity.mathf.Cos(angle),
                radarCenterY + selectPatternPanel.radarRadiusUnit * 100 * unity.mathf.Sin(angle)))
            painter.ClosePath()
            painter.Stroke()
        end

        -- Draw pentagons
        for pentagon = 1, 5 do
            local radius = selectPatternPanel.radarRadiusUnit * pentagon * 20
            if (pentagon == 5) then
                painter.strokeColor = unity.color.__new(1, 1, 1, majorStrokeAlpha)
            else
                painter.strokeColor = unity.color.__new(1, 1, 1, minorStrokeAlpha)
            end
            painter.BeginPath()
            painter.MoveTo(unity.vector2.__new(radarCenterX, radarCenterY - radius))
            for vertex = 1, 4 do
                local angle = RadarAngleForVertex(vertex)
                painter.LineTo(unity.vector2.__new(
                    radarCenterX + radius * unity.mathf.Cos(angle),
                    radarCenterY + radius * unity.mathf.Sin(angle)))
            end
            painter.ClosePath()
            painter.Stroke()
        end

        -- Draw radar
        if (selectPatternPanel.radarOfSelectedPattern != nil) then
            painter.fillColor = unity.color.__new(165 / 256, 214 / 256, 167 / 256)
            painter.BeginPath()
            painter.MoveTo(unity.vector2.__new(
                radarCenterX,
                radarCenterY - selectPatternPanel.radarRadiusUnit * selectPatternPanel.radarOfSelectedPattern.density.normalized))
            function DrawRadarDimension(vertex, normalized)
                local angle = RadarAngleForVertex(vertex)
                painter.LineTo(unity.vector2.__new(
                    radarCenterX + selectPatternPanel.radarRadiusUnit * normalized * unity.mathf.Cos(angle),
                    radarCenterY + selectPatternPanel.radarRadiusUnit * normalized * unity.mathf.Sin(angle)))
            end
            DrawRadarDimension(1, selectPatternPanel.radarOfSelectedPattern.peak.normalized)
            DrawRadarDimension(2, selectPatternPanel.radarOfSelectedPattern.speed.normalized)
            DrawRadarDimension(3, selectPatternPanel.radarOfSelectedPattern.chaos.normalized)
            DrawRadarDimension(4, selectPatternPanel.radarOfSelectedPattern.async.normalized)
            painter.ClosePath()
            painter.Fill()
        end
    end)
end

selectPatternPanel.StartPreviewTrackPlayback = function()
    local trackFolder = selectTrackPanel.selectedTrackFolder
    local trackMetadata = selectTrackPanel.selectedFullTrack.trackMetadata

    if (selectPatternPanel.previewPlaybackCoroutine != nil) then
        tm.StopCoroutine(selectPatternPanel.previewPlaybackCoroutine)
    end

    if (trackMetadata.previewTrack == nil) then return end
    if (trackMetadata.previewTrack == "") then return end
    if (trackMetadata.previewStartTime > trackMetadata.previewEndTime) then return end
    local previewPath = tm.paths.Combine(trackFolder, trackMetadata.previewTrack)

    tm.io.LoadAudioFromFile(previewPath, function(status, sound)
        if (not status.Ok()) then return end
        -- If the user transitioned away while loading the sound, don't play.
        if (not selectPatternPanel.panel.display) then return end

        selectPatternPanel.previewTrack = sound
        local startTime = trackMetadata.previewStartTime
        local endTime = trackMetadata.previewEndTime
        if (startTime < 0) then startTime = 0 end
        if (endTime > sound.length) then endTime = sound.length end
        if (endTime == 0) then endTime = sound.length end
        local previewLength = endTime - startTime
        local fadeLength = 1
        if (fadeLength > previewLength * 0.5) then fadeLength = previewLength * 0.5 end

        selectPatternPanel.previewPlaybackCoroutine = tm.StartCoroutine(function()
            while (true) do
                local timer = 0
                -- Start at volume 0
                selectPatternPanel.previewTrackChannel = tm.audio.PlayMusic(sound, startTime, 0)
                while (timer < fadeLength) do
                    selectPatternPanel.previewTrackChannel.volume = timer / fadeLength
                    timer = timer + unity.time.deltaTime
                    coroutine.yield()
                end
                selectPatternPanel.previewTrackChannel.volume = 1
                timer = 0
                while (timer < previewLength - fadeLength * 2) do
                    timer = timer + unity.time.deltaTime
                    coroutine.yield()
                end
                timer = 0
                -- TODO: what if the sound played to its end and got auto-released?
                while (timer < fadeLength) do
                    selectPatternPanel.previewTrackChannel.volume = 1 - timer / fadeLength
                    timer = timer + unity.time.deltaTime
                    coroutine.yield()
                end
            end
        end)
    end)
end

selectPatternPanel.StopPreviewTrackPlayback = function()
    if (selectPatternPanel.previewPlaybackCoroutine != nil) then
        tm.StopCoroutine(selectPatternPanel.previewPlaybackCoroutine)
        selectPatternPanel.previewPlaybackCoroutine = nil
    end
    
    if (selectPatternPanel.previewTrackChannel != nil and selectPatternPanel.previewTrackChannel.isPlaying) then
        tm.StartCoroutine(function()
            local timer = 0
            local fadeLength = 0.2
            while (timer < fadeLength) do
                selectPatternPanel.previewTrackChannel.volume = 1 - timer / fadeLength
                timer = timer + unity.time.deltaTime
                coroutine.yield()
            end
            selectPatternPanel.previewTrackChannel.Stop()
            tm.io.ReleaseAudio(selectPatternPanel.previewTrack)
        end)
    end
end

selectPatternPanel.OnControlSchemeOverrideChanged = function()
    for index, pattern in ipairs(selectTrackPanel.selectedFullTrack.patterns) do
        local radioButton = selectPatternPanel.allPatternRadioButtons[index]
        SetUpControlSchemeIcon(pattern.patternMetadata.controlScheme, radioButton.Q("pattern-banner").Q("scheme-icon-container"))
    end
end

selectPatternPanel.Initialize()