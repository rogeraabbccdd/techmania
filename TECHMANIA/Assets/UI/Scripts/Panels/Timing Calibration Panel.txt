timingCalibrationPanel = {
    panel = tm.root.Q("timing-calibration-panel"),

    touchRadio = tm.root.Q("timing-calibration-panel").Q("touchscreen-radio").Q("radio-button"),
    kmRadio = tm.root.Q("timing-calibration-panel").Q("km-radio").Q("radio-button"),
    offsetSlider = tm.root.Q("timing-calibration-panel").Q("note-offset").Q("value-slider").Q("slider"),
    offsetText = tm.root.Q("timing-calibration-panel").Q("note-offset").Q("value-text").Q("text-field"),
    latencySlider = tm.root.Q("timing-calibration-panel").Q("input-latency").Q("value-slider").Q("slider"),
    latencyText = tm.root.Q("timing-calibration-panel").Q("input-latency").Q("value-text").Q("text-field")
}

timingCalibrationPanel.Show = function()
    tm.calibrationPreview.Begin()
    timingCalibrationPanel.SwitchToTouch()
end

timingCalibrationPanel.Hide = function()
    tm.calibrationPreview.Conclude()
end

timingCalibrationPanel.SwitchToTouch = function()
    local touchRadio = timingCalibrationPanel.touchRadio
    local kmRadio = timingCalibrationPanel.kmRadio
    controls.SetRadioButton(touchRadio, {touchRadio, kmRadio})

    controls.SetSliderValueWithoutNotify(timingCalibrationPanel.offsetSlider, tm.options.touchOffsetMs)
    timingCalibrationPanel.offsetText.SetValueWithoutNotify(tm.options.touchOffsetMs)
    controls.SetSliderValueWithoutNotify(timingCalibrationPanel.latencySlider, tm.options.touchLatencyMs)
    timingCalibrationPanel.latencyText.SetValueWithoutNotify(tm.options.touchLatencyMs)

    tm.calibrationPreview.SwitchToTouch()
end

timingCalibrationPanel.SwitchToKm = function()
    local touchRadio = timingCalibrationPanel.touchRadio
    local kmRadio = timingCalibrationPanel.kmRadio
    controls.SetRadioButton(kmRadio, {touchRadio, kmRadio})

    controls.SetSliderValueWithoutNotify(timingCalibrationPanel.offsetSlider, tm.options.keyboardMouseOffsetMs)
    timingCalibrationPanel.offsetText.SetValueWithoutNotify(tm.options.keyboardMouseOffsetMs)
    controls.SetSliderValueWithoutNotify(timingCalibrationPanel.latencySlider, tm.options.keyboardMouseLatencyMs)
    timingCalibrationPanel.latencyText.SetValueWithoutNotify(tm.options.keyboardMouseLatencyMs)

    tm.calibrationPreview.SwitchToKeyboardMouse()
end

timingCalibrationPanel.Initialize = function()
    timingCalibrationPanel.offsetSlider.lowValue = -200
    timingCalibrationPanel.offsetSlider.highValue = 200
    timingCalibrationPanel.latencySlider.lowValue = -200
    timingCalibrationPanel.latencySlider.highValue = 200

    local panel = timingCalibrationPanel.panel

    timingCalibrationPanel.touchRadio.RegisterCallback(eventType.Click,
        timingCalibrationPanel.SwitchToTouch)
    timingCalibrationPanel.kmRadio.RegisterCallback(eventType.Click,
        timingCalibrationPanel.SwitchToKm)

        local function OffsetChanged(newValue)
        if (controls.RadioButtonIsOn(timingCalibrationPanel.touchRadio)) then
            tm.options.touchOffsetMs = newValue
        else  -- km
            tm.options.keyboardMouseOffsetMs = newValue
        end
    end
    timingCalibrationPanel.offsetSlider.RegisterCallback(eventType.ChangeInt, function(_, event)
        OffsetChanged(event.newValue)
        timingCalibrationPanel.offsetText.SetValueWithoutNotify(event.newValue)
    end)
    timingCalibrationPanel.offsetText.RegisterCallback(eventType.ChangeInt, function(_, event)
        local newValue = unity.mathf.Clamp(
            event.newValue,
            timingCalibrationPanel.offsetSlider.lowValue,
            timingCalibrationPanel.offsetSlider.highValue)
        OffsetChanged(newValue)
        controls.SetSliderValueWithoutNotify(timingCalibrationPanel.offsetSlider, newValue)
        if (newValue != event.newValue) then
            timingCalibrationPanel.offsetText.SetValueWithoutNotify(newValue)
        end
    end)

    local function LatencyChanged(newValue)
        if (controls.RadioButtonIsOn(timingCalibrationPanel.touchRadio)) then
            tm.options.touchLatencyMs = newValue
        else  -- km
            tm.options.keyboardMouseLatencyMs = newValue
        end
    end
    timingCalibrationPanel.latencySlider.RegisterCallback(eventType.ChangeInt, function(_, event)
        LatencyChanged(event.newValue)
        timingCalibrationPanel.latencyText.SetValueWithoutNotify(event.newValue)
    end)
    timingCalibrationPanel.latencyText.RegisterCallback(eventType.ChangeInt, function(_, event)
        local newValue = unity.mathf.Clamp(
            event.newValue,
            timingCalibrationPanel.latencySlider.lowValue,
            timingCalibrationPanel.latencySlider.highValue)
        LatencyChanged(newValue)
        controls.SetSliderValueWithoutNotify(timingCalibrationPanel.latencySlider, newValue)
        if (newValue != event.newValue) then
            timingCalibrationPanel.latencyText.SetValueWithoutNotify(newValue)
        end
    end)

    -- Set up calibrationPreview
    local function SetEarlyLateString()
        tm.calibrationPreview.earlyString = tm.l10n.GetString("timing_calibration_early_indicator")
        tm.calibrationPreview.lateString = tm.l10n.GetString("timing_calibration_late_indicator")
    end
    tm.calibrationPreview.previewContainer = panel.Q("preview-container")
    tm.calibrationPreview.timingDisplayClasses = {"text-body"}
    tm.calibrationPreview.timingDisplayMaxLines = 5
    SetEarlyLateString()
    tm.calibrationPreview.setEarlyLateColors = true
    tm.calibrationPreview.earlyColor = unity.color.__new(144 / 255, 202 / 255, 249 / 255)  -- #90CAF9, blue 200
    tm.calibrationPreview.lateColor = unity.color.__new(239 / 255, 154 / 255, 154 / 255)  -- #EF9A9A, red 200

    table.insert(callbacksOnLocaleChange, SetEarlyLateString)
end

timingCalibrationPanel.Initialize()