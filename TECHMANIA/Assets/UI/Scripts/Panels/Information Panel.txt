infoPanel = {
    panel = tm.root.Q("information-panel"),
    statsCoroutine = nil
}

infoPanel.Initialize = function()
    local panel = infoPanel.panel
    panel.display = false

    local platform = tm.GetPlatform()
    panel.Q("folder-location-pc").display = (platform == "Windows")
    panel.Q("folder-location-ios").display = (platform == "iOS")
    panel.Q("folder-location-android").display = (platform == "Android")
    panel.Q("ios-guided-access").display = (platform == "iOS")

    local function RegisterLinkButton(name, url)
        panel.Q(name).RegisterCallback(eventType.Click, function()
            tm.OpenURL(url)
        end)
    end
    RegisterLinkButton("website-button", "https://techmania-team.herokuapp.com/")
    RegisterLinkButton("discord-button", "https://discord.gg/K4Nf7AnAZt")
    RegisterLinkButton("github-button", "https://github.com/techmania-team/techmania")
    RegisterLinkButton("documentation-button", "https://techmania-team.github.io/techmania-docs/")
    RegisterLinkButton("youtube-button", "https://www.youtube.com/channel/UCoHxk7shdAKf7W3yqUJlDaA")

    local firstLocale = true
    local localizerCredit = ""
    for localeName, locale in pairs(tm.l10n.GetAllLocales()) do
        if (localeName != "en") then
            local localizers = table.concat(locale.localizers, ", ")
            local creditLine = localizers .. " (" .. locale.languageName .. ")"
            if (not firstLocale) then
                localizerCredit = localizerCredit .. "\n"
            end
            localizerCredit = localizerCredit .. creditLine
            firstLocale = false
        end
    end

    panel.Q("localization-text").text = localizerCredit
end

infoPanel.Show = function()
    tm.SetDiscordActivity("", tm.l10n.GetString("discord_state_information"))

    infoPanel.statsCoroutine = tm.StartCoroutine(function()
        local stats = tm.stats
        local counters = net.string.Format(tm.l10n.GetString("information_panel_statistics_counters_format"),
            tostring(stats.timesAppLaunched),
            tostring(stats.totalPatternsPlayed),
            tostring(stats.totalNotesHit))
        
        while (true) do
            local function FormatTimeSpan(timeSpan)
                local hours = timeSpan.Days * 24 + timeSpan.Hours
                -- Lua's string library to the rescue
                return string.format("%02d", hours) .. ":" ..
                    string.format("%02d", timeSpan.Minutes) .. ":" ..
                    string.format("%02d", timeSpan.Seconds)
            end
            local timers = net.string.Format(tm.l10n.GetString("information_panel_statistics_timers_format"),
                FormatTimeSpan(stats.totalPlayTime),
                FormatTimeSpan(stats.timeInGame),
                FormatTimeSpan(stats.timeInEditor))
            local statsContent = timers .. "\r\n\r\n" .. counters
            infoPanel.panel.Q("statistics-text").text = statsContent

            local timer = 0
            while (timer < 1) do
                timer = timer + unity.time.deltaTime
                coroutine.yield()
            end
        end
    end)
end

infoPanel.Hide = function()
    tm.StopCoroutine(infoPanel.statsCoroutine)
end

infoPanel.Initialize()